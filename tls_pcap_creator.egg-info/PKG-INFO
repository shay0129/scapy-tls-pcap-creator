Metadata-Version: 2.4
Name: tls-pcap-creator
Version: 1.0.0
Summary: TLS Protocol Simulator & Network Traffic Generator
Home-page: https://github.com/shay0129/scapy-tls-pcap-creator
Author: Shay Mordechai
Author-email: 
License: MIT
Project-URL: Homepage, https://github.com/shay0129/scapy-tls-pcap-creator
Project-URL: Repository, https://github.com/shay0129/scapy-tls-pcap-creator
Project-URL: Issues, https://github.com/shay0129/scapy-tls-pcap-creator/issues
Keywords: tls,pcap,network,security,scapy,cryptography,ctf
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Information Technology
Classifier: Topic :: System :: Networking
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Software Development :: Testing
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: scapy==2.6.1
Requires-Dist: cryptography==44.0.0
Requires-Dist: pycryptodome==3.21.0
Requires-Dist: pyOpenSSL==24.3.0
Requires-Dist: setuptools==75.6.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: pytest-mock>=3.11.0; extra == "dev"
Requires-Dist: black>=23.7.0; extra == "dev"
Requires-Dist: flake8>=6.0.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"
Requires-Dist: bandit>=1.7.5; extra == "dev"
Requires-Dist: safety>=2.3.0; extra == "dev"
Requires-Dist: pre-commit>=3.3.0; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=7.1.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.3.0; extra == "docs"
Dynamic: home-page
Dynamic: requires-python

# Scapy TLS 1.2 PCAP Creator

## Project Overview

This project provides a robust framework for simulating TLS 1.2 handshake sessions and generating corresponding PCAP files using Scapy. It allows for detailed configuration of client and server behaviors, including client certificate usage, to create realistic network traffic captures for analysis and testing purposes. The core functionality revolves around the `UnifiedTLSSession` class, which orchestrates the TLS handshake and data exchange.

This tool was originally developed as part of a larger CTF (Capture The Flag) challenge focused on network security and the TLS protocol.

## Table of Contents
- [Core Features](#core-features)
- [TLS Handshake Implementation Details](#tls-handshake-implementation-details)
  - [Client Hello](#client-hello)
  - [Server Hello](#server-hello)
  - [Client Key Exchange](#client-key-exchange)
  - [Master Secret Generation](#master-secret-generation)
  - [Change Cipher Spec (Client & Server)](#change-cipher-spec-client--server)
  - [SSLKeyLog File Creation](#sslkeylog-file-creation)
  - [Application Data Encryption](#application-data-encryption)
- [Technical Skills Demonstrated](#technical-skills-demonstrated)
- [Prerequisites](#prerequisites)
- [Installation](#installation)
- [Usage](#usage)
- [Known Limitations](#known-limitations)
- [Contributing](#contributing)
- [License](#license)

---
## Core Features

1.  **TLS 1.2 Handshake Simulation**: Accurately simulates the TLS 1.2 handshake process, including certificate exchange (optional client certificate) and negotiation of encryption parameters.
2.  **PCAP File Generation**: Creates PCAP files of the simulated TLS sessions, allowing for offline analysis with tools like Wireshark.
3.  **SSLKeyLog File Export**: Generates an SSLKeyLog file containing `CLIENT_RANDOM` and `master_secret` values, enabling decryption of the captured TLS traffic in Wireshark.
4.  **Customizable Sessions**: Supports configuration for multiple client sessions with different parameters (e.g., with or without client certificates, different client IPs/ports).
5.  **Application Data Exchange**: Facilitates exchange of encrypted application data (e.g., HTTP GET requests and responses) over the established TLS session.

---
## TLS Handshake Implementation Details

This project implements the key stages of a TLS 1.2 handshake using Scapy. The process ensures the secure generation of session keys for encryption and integrity checks.

### Client Hello
The client initiates the handshake by sending supported ciphers, extensions (like SNI, supported groups, signature algorithms), and random bytes. The client random is a combination of GMT Unix timestamp and 28 random bytes.

### Server Hello
The server responds with its own random bytes, the selected cipher suite (e.g., `TLS_RSA_WITH_AES_128_CBC_SHA256`), and relevant extensions.

### Client Key Exchange
The client generates a Pre-Master Secret, encrypts it using the server's public key (obtained from the server's certificate, assuming RSA Key Exchange), and sends it to the server. This implementation supports optional sending of a client certificate. The Pre-Master Secret is encrypted using PKCS#1 v1.5 padding.

*Notice: In TLS 1.2 with RSA Key Exchange, no `ServerKeyExchange` message is typically sent as the server's public key is sufficient.*

### Master Secret Generation
Both client and server derive the same Master Secret using the Pre-Master Secret and the random values exchanged. The server decrypts the Pre-Master Secret using its private key. The Master Secret is computed using a PRF (Pseudo-Random Function).

### Change Cipher Spec (Client & Server)
Both client and server send `ChangeCipherSpec` messages to notify the other party that subsequent messages will be encrypted using the negotiated settings. This is followed by an encrypted `Finished` message to verify the handshake integrity.

### SSLKeyLog File Creation
To enable debugging and analysis, the `CLIENT_RANDOM` and `master_secret` are exported to an SSLKeyLog file. This file can be loaded into Wireshark to decrypt the captured TLS traffic. The format is: `CLIENT_RANDOM <client_random_hex> <master_secret_hex>`.

### Application Data Encryption
The tool supports sending and receiving encrypted application data over the established TLS session, using AES-128-CBC with HMAC-SHA256 (based on the example cipher suite).

---
## Technical Skills Demonstrated

This project showcases proficiency in:
* **Network Protocols**: Deep understanding and implementation of TLS 1.2.
* **Python Libraries**: Extensive use of Scapy for packet manipulation and `cryptography` for cryptographic operations.
* **Cryptography**: Implementation of key exchange, pre-master and master secret generation, and application data encryption.
* **PCAP File Analysis**: Generation of PCAP files suitable for analysis with tools like Wireshark and Tshark.

---
## Prerequisites

* Python 3.8 or higher (required)
* Scapy
* Cryptography library
* (List any other specific Python libraries from your `requirements.txt` or `setup.py` that are essential for this part)

---
## Certificate and Key Management

All certificate and key file paths are managed via the `CertificatePaths` class in the codebase. By default, certificates and keys are expected in `tls/certificates/certs/`:

- `ca.crt`, `ca.key` (CA certificate and key)
- `server.crt`, `server.key` (Server certificate and key)
- `client.crt`, `client.key` (Client certificate and key)

If any certificate or key is missing or invalid, the simulation will log a clear error and exit. Ensure all files are present and valid before running the simulation.

---
## SNI and Extension Support

- **SNI (Server Name Indication)** is always set and included in both client and server hello messages.
- The handshake supports and correctly handles TLS extensions, including SNI and others (e.g., supported groups, signature algorithms).

---
## Error Handling and Logging

- The simulation includes robust error handling for missing/invalid certificates, keys, and handshake failures.
- All errors and handshake steps are logged to files in `tls/logs/`.
- Fast failure is implemented: the simulation will exit early if a critical error is detected.

---
## Installation

1.  Clone the repository:
    ```bash
    git clone [https://github.com/shay0129/scapy-tls-pcap-creator.git](https://github.com/shay0129/scapy-tls-pcap-creator.git)
    cd scapy-tls-pcap-creator
    ```
2.  Install dependencies (ensure you have a `requirements.txt` for this part or adapt the `pip install -e .` if you have a `setup.py` for this specific project):
    ```bash
    pip install -r requirements.txt 
    # Or if using setup.py from the original project, ensure it's adapted:
    # pip install -e . 
    ```

---
## Usage

### Running the TLS Session Simulation

Run the main script to generate PCAP files with TLS sessions:

```bash
python -m tls.main
```

This will:

* Create two simulated TLS 1.2 sessions:
  * One with a client certificate (Client 1)
  * One without a client certificate (Client 2)
* Generate a PCAP file (default location: `tls/output/capture.pcap`)
* Create log files in the `tls/logs/` directory
* Generate an SSL keylog file for decrypting the TLS traffic

### Output Files

* **PCAP file**: Contains the captured network packets (configurable path)
* **Log files**: Detailed logs of the TLS handshake process (see `tls/logs/`)
* **SSL keylog file**: Contains the necessary secrets for decrypting TLS traffic (see `tls/logs/ssl_key_log.log`)

---
## Known Limitations

* The tool currently focuses on TLS 1.2 and does not support TLS 1.3.
* Only RSA key exchange is implemented; other key exchange methods (e.g., Diffie-Hellman) are not supported.
* Limited support for advanced TLS features like OCSP stapling, session resumption, and renegotiation.

---
## Contributing

Contributions are welcome! Please follow these steps:

1. Fork the repository
2. Create a new branch for your feature or bugfix
3. Make your changes and commit them
4. Push to your forked repository
5. Submit a pull request describing your changes

Please ensure your code adheres to the existing style and includes appropriate tests.

---
## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---
## Acknowledgments

* Inspired by real-world network security challenges and the need for effective TLS traffic analysis tools.
* Utilizes Scapy, a powerful Python library for network packet manipulation and analysis.
* Leverages the `cryptography` library for robust and secure cryptographic operations.

---
## Troubleshooting

If you encounter errors during simulation:

* **Certificate or Key Not Found**: Ensure all required certificate and key files exist in `tls/certificates/certs/`.
* **Permission Errors**: Run the tool with appropriate permissions to access files and directories.
* **Import/Attribute Errors**: Make sure you are using the latest code, and that all dependencies are installed.
* **Detailed Logs**: Check the log files in `tls/logs/` for detailed error messages and troubleshooting hints.
* **Missing or invalid certificates/keys**: Ensure all required files are present in `tls/certificates/certs/` and are valid PEM files.
* **PCAP not generated**: Check for errors in `tls/logs/tls_session.log` and ensure you have write permissions to the output directory.
* **Wireshark decryption not working**: Make sure you are using the correct SSL keylog file and that the PCAP contains the expected TLS handshake.
* **Python version errors**: Use Python 3.8 or higher.
* **Other issues**: Review log files in `tls/logs/` for detailed error messages.

